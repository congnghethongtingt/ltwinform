<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOKionw+Xl1v/l5db/o6OZ0VZW
        UcBWVlHAVlZRwFZWUcBWVlHAVlZRwEREQL9CQj7AQkI+wEJCPsBCQj7AQkI+wHR0bcPl5db/5eXW/2Bg
        WcAAAAA3AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABs2NjTB5eXW/+Xl
        1v/l5db/5eXW/+Xl1v/l5db/5eXW/+Xl1v/l5db/5eXW/+Xl1v/l5db/5eXW/+Xl1v/l5db/5eXW/+Xl
        1v/l5db/U1NMvwAAADQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKURE
        QL/l5db/5eXW/9HRw+2Dg3rGg4N6xoODesaTk4rLp6ec07q6rt3Ozr/o4+PU/eXl1v/l5db/5eXW/+Xl
        1v/l5db/5eXW/+Xl1v9EREC/AAAAKgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAArRUVAv+Xl1v/l5db/0dHE7YODesaDg3rGg4N6xnJyasNTU02/PDw4wCcnJMQZGRjKGBgXyh8f
        HccgIB/GFRUUzRkZGMrg4NH55eXW/zQ0McEAAAAeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAACVBQT3A5eXW/+Xl1v/l5db/5eXW/+Xl1v/l5db/5eXW/+Xl1v/l5db/5eXW/+Xl
        1v/l5db/5eXW/+Xl1v/l5db/4+PU/eXl1v/l5db/IyMgxgAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAID09OsDl5db/5eXW/4yMg8lCQj7AQkI+wEdHQb9eXljAeHhwxJSU
        i8utraHWrq6j1q6uo9aurqPWsbGm18LCteLPz8Lp5eXW/+Xl1v8XFxbHAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAePT05wOXl1v/l5db/19fI8cLCteK1tajZq6ui1ZiY
        js2CgnnGbGxlwlZWUcBWVlHAVlZRwElJRL9CQj7AMTEvvDo6NrSOjoTJZ2dgwQYGBdEAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACA9PTnA5eXW/+Xl1v/l5db/5eXW/+Xl
        1v/l5db/5eXW/+Xl1v/l5db/5eXW/+Xl1v/l5db/5eXW/+Xl1v8TExHOT09Pv1lZWcInJyfCAAAAfAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIj09OcDl5db/5eXW/5+f
        lNCDg3rGlpaMzKGhl9CurqPWvr6x38bGuuXV1cjv1tbI+tjYyv/l5db/5eXW/zk5NcCsrKzhqqqq6wUF
        BbsAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnQkI+wOXl
        1v/l5db/oaGX0ICAeMZsbGXCXV1WwFFRTL9CQj7ANDQwwSoqJ8MgIB/GISEgxycnJMwhISDIBwcG3ZmZ
        mdsaGhrDAAAAKgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AC1LS0W/5eXW/+Xl1v/l5db/5eXW/+Xl1v/l5db/5eXW/+Xl1v/l5db/5eXW/+Xl1v/l5db/5eXW/+Xl
        1v8qKifEIiIiwwAAAFwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAMzQ0MMGurqPWrq6j1q6uo9aurqPWrq6j1q6uo9aurqPWrq6j1rGxptfCwrXiwsK14sLC
        teLCwrXiwsK14gwMC9YAAAB+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAALAAAAcwAAAHcAAAB3AAAAdwAAAHcAAAB3AAAAdwAAAHcAAAB3AAAAeAAA
        AIgAAACIAAAAiAAAAIgAAACIAAAAewAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/////////////AP///gB/4AAAP+AAAB/gAAAf4AAAH+AAAB/gA
        AA/4AAAP+AAAH/gAAD/4AAB/+AAAf/gAAH/4AAB/+AAAf/gAAH/4AAB/+AAAf/gAAH/4AAB/+AAAf/gA
        AP/4AAD/+AAB//gAA//4AAf///4P////////////
</value>
  </data>
</root>